name: Hprofile Actions
on: workflow_dispatch
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven package
        run: mvn package

      - name: Checkstyle
        run: mvn checkstyle:checkstyle


      # Setup java 11 to be default (sonar-scanner requirement as of 5.x)
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' # See 'Supported distributions' for available options
         java-version: '11'

    # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
   
    # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORG }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJ }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

     # 5. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build Docker image (locally first)
      - name: Build Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/vprofile4sep
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .

      # 7. Trivy Scan (before pushing)
      - name: Trivy Scan Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/vprofile4sep:latest
          format: 'table'
          exit-code: '0'    # donâ€™t fail build on vulnerabilities
          ignore-unfixed: true

      # 8. Push Docker image
      - name: Push Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/vprofile4sep
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}


  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: Testing

    steps:
      # 1. Checkout repo (for k8s manifests if needed)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Update kubeconfig for EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-cluster --region us-east-1
        
     # 4. Apply Deployment manifest (creates if missing, updates if exists)
      - name: Apply Kubernetes Deployment
        run: kubectl apply -f k8s/deployment.yaml





